{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4da9e39b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import random\n",
    "pygame.init()\n",
    "BLACK = (0, 0, 0)\n",
    "WHITE = (255, 255, 255)\n",
    "WINDOW_SIZE = (800, 600)\n",
    "screen = pygame.display.set_mode(WINDOW_SIZE)\n",
    "pygame.display.set_caption(\"Палач\")\n",
    "font_small = pygame.font.Font(None, 30)\n",
    "font_large = pygame.font.Font(None, 60)\n",
    "WORDS = [\"Кошка\", \"Собака\", \"Машина\", \"Дом\", \"Человек\", \"Книга\", \"Карандаш\", \"Стул\", \"Стол\", \"Окно\"]\n",
    "MAX_ERRORS = 6\n",
    "word_to_guess = random.choice(WORDS)\n",
    "guessed_letters = []\n",
    "wrong_guesses = []\n",
    "running = True\n",
    "while running:\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "        elif event.type == pygame.KEYDOWN:\n",
    "            if event.unicode.isalpha():\n",
    "                letter = event.unicode.upper()\n",
    "                if letter not in guessed_letters and letter not in wrong_guesses:\n",
    "                    if letter in word_to_guess:\n",
    "                        guessed_letters.append(letter)\n",
    "                        if set(guessed_letters) == set(word_to_guess):\n",
    "                            message = font_large.render(\"Вы выиграли!\", True, BLACK)\n",
    "                            running = False\n",
    "                    else:\n",
    "                        wrong_guesses.append(letter)\n",
    "                        if len(wrong_guesses) == MAX_ERRORS:\n",
    "                            message = font_large.render(\"Вы проиграли!\", True, BLACK)\n",
    "                            running = False\n",
    "    screen.fill(WHITE)\n",
    "    word_text = \"\"\n",
    "    for letter in word_to_guess:\n",
    "        if letter in guessed_letters:\n",
    "            word_text += letter + \" \"\n",
    "        else:\n",
    "            word_text += \"_ \"\n",
    "    word_surface = font_large.render(word_text, True, BLACK)\n",
    "    screen.blit(word_surface, (WINDOW_SIZE[0] // 2 - word_surface.get_width() // 2, 100))\n",
    "    wrong_guesses_text = \"Неправильные догадки: \" + \" \".join(wrong_guesses)\n",
    "    wrong_guesses_surface = font_small.render(wrong_guesses_text, True, BLACK)\n",
    "    screen.blit(wrong_guesses_surface, (10, 10))\n",
    "    pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2 - 100, WINDOW_SIZE[1] - 50), (WINDOW_SIZE[0] // 2 + 100, WINDOW_SIZE[1] - 50), 5)\n",
    "    if len(wrong_guesses) >= 1:\n",
    "        pygame.draw.circle(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 200), 20, 3)\n",
    "    if len(wrong_guesses) >= 2:\n",
    "        pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 100), (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 180), 3)\n",
    "    if len(wrong_guesses) >= 3:\n",
    "        pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 100), (WINDOW_SIZE[0] // 2 - 30, WINDOW_SIZE[1] - 50), 3)\n",
    "    if len(wrong_guesses) >= 4:\n",
    "        pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 100), (WINDOW_SIZE[0] // 2 + 30, WINDOW_SIZE[1] - 50), 3)\n",
    "    if len(wrong_guesses) >= 5:\n",
    "        pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 170), (WINDOW_SIZE[0] // 2 - 50, WINDOW_SIZE[1] - 150), 3)\n",
    "    if len(wrong_guesses) >= 6:\n",
    "        pygame.draw.line(screen, BLACK, (WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] - 170), (WINDOW_SIZE[0] // 2 + 50, WINDOW_SIZE[1] - 150), 3)\n",
    "    if not running:\n",
    "        screen.blit(message, (WINDOW_SIZE[0] // 2 - message.get_width() // 2, 200))\n",
    "    pygame.display.flip()\n",
    "pygame.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b44470e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
